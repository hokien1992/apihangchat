#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('project2:server');

var http = require('http');
var https = require('https');
var fs = require('fs');
//var path = require('path');
var options = {
  key: fs.readFileSync(__dirname+'/key.pem', 'utf8'),
  cert: fs.readFileSync(__dirname+'/cert.pem', 'utf8')
};
// var options = {
//   key: fs.readFileSync('vnmall-key.pem', 'utf8'),
//   cert: fs.readFileSync('vnmall-cert.pem', 'utf8')
// };
// var options = {
//   key: fs.readFileSync('/etc/pki/tls/private/vnmall.com.vn.key', 'utf8'),
//   cert: fs.readFileSync('/etc/pki/tls/certs/vnmall.com.vn.cert', 'utf8')
// };
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3012');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var servers = https.createServer(options, app);
//https.createServer(options, app).listen(443);
//var server = https.createServer(options, app);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
// servers.listen(port);
servers.on('error', onError);
servers.on('listening', onListening);
servers.listen(3010);
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
